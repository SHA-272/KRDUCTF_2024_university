import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from os import getenv

TOKEN = getenv("TOKEN")
FLAG = getenv("FLAG")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
DB_FILE = "online_store.db"

# –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute(
    """
	CREATE TABLE IF NOT EXISTS users (
		id INTEGER PRIMARY KEY,
		user_id INTEGER NOT NULL,
		balance INTEGER NOT NULL DEFAULT 0
	)
	"""
)
conn.commit()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute(
    """
	CREATE TABLE IF NOT EXISTS products (
		id INTEGER PRIMARY KEY,
		name TEXT NOT NULL,
		price INTEGER NOT NULL,
        file TEXT NOT NULL
	)
	"""
)
conn.commit()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute(
    """
	CREATE TABLE IF NOT EXISTS orders (
		id INTEGER PRIMARY KEY,
		user_id INTEGER NOT NULL,
		product_id INTEGER NOT NULL,
		quantity INTEGER NOT NULL,
		FOREIGN KEY(user_id) REFERENCES users(user_id),
		FOREIGN KEY(product_id) REFERENCES products(id)
	)
	"""
)
conn.commit()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute(
    """
	INSERT INTO products (name, price, file) VALUES
		("üçö –ú–∏—Å–∫–∞ —Ä–∏—Å", 10, "./files/rice.png"),
		("üòª –ö–æ—à–∫–∞-–∂–µ–Ω–∞", 200, "./files/catwife.jpeg"),
        ("üì± –°—è–æ–º–∏", 75, "./files/xiaomi.jpg"),
        ("üö© –í–µ–ª–∏–∫–∏–π —Ñ–ª–∞–≥", 10000000, "./files/flag.png")
	"""
)
conn.commit()


# –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
start_message = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –≤–µ–ª–∏–∫–∏–π –º–∞–≥–∞–∑–∏–Ω! –≠—Ç–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    "/catalog - –°–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä\n"
    "/cart - –°–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω–∞\n"
    "/balance - –°–º–æ—Ç—Ä–µ—Ç—å –¥–µ–Ω—å–≥–∞\n"
    "/help - –ü–æ–º–æ–≥–∞—Ç—å"
)


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞
class Quantity(StatesGroup):
    quantity = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    cursor.execute(
        "INSERT INTO users (user_id, balance) VALUES (?, ?)",
        (message.from_user.id, 100),
    )
    await message.answer(start_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer(start_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog
@dp.message_handler(commands=["catalog"])
async def cmd_catalog(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    cursor.execute("SELECT id, name, price FROM products")
    products = cursor.fetchall()

    for product in products:
        keyboard.add(
            types.InlineKeyboardButton(
                f"{product[1]} - {product[2]}üí∑", callback_data=f"get_{product[0]}"
            )
        )

    await message.answer("–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(lambda query: query.data.startswith("get_"), state=None)
async def process_callback_product(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await bot.answer_callback_query(callback_query.id)
    product_id = int(callback_query.data.split("_")[1])

    cursor.execute("SELECT name, price FROM products WHERE id=?", (product_id,))
    product = cursor.fetchone()

    await bot.delete_message(
        callback_query.from_user.id, callback_query.message.message_id
    )
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –≤—ã–±—Ä–∞—Ç—å: {product[0]} - {product[1]}üí∑\n\n" "–í–≤–µ—Å—Ç–∏ —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä:",
    )
    await state.update_data(product_id=product_id)
    await Quantity.quantity.set()
    await bot.answer_callback_query(callback_query.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=Quantity.quantity)
async def process_product_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.")
        return

    product_id = (await state.get_data()).get("product_id")
    user_id = message.from_user.id

    cursor.execute(
        "INSERT INTO orders (user_id, product_id, quantity) VALUES (?, ?, ?)",
        (user_id, product_id, quantity),
    )
    conn.commit()

    await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–∞!")
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cart
@dp.message_handler(commands=["cart"])
async def cmd_cart(message: types.Message):
    user_id = message.from_user.id

    cursor.execute(
        """
		SELECT products.name, products.price, orders.quantity
		FROM orders
		JOIN products ON orders.product_id = products.id
		WHERE orders.user_id=?
		""",
        (user_id,),
    )
    cart_items = cursor.fetchall()

    total_price = sum(item[1] * item[2] for item in cart_items)

    if len(cart_items) == 0:
        await message.answer("–í–∞—à –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç.")
    else:
        cart_text = "–í–∞—à –∫–æ—Ä–∑–∏–Ω–∞:\n"
        for item in cart_items:
            cart_text += f"{item[0]} - {item[1]}üí∑ x {item[2]}\n"
        cart_text += f"\–í—Å–µ–≥–æ —Å—É–º–º–∞: {total_price}üí∑\n\n"

        inline_keyboard = types.InlineKeyboardMarkup()
        inline_keyboard.add(
            types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data="buy_cart"),
            types.InlineKeyboardButton("–ß–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω–∞", callback_data="clear_cart"),
        )
        await message.answer(cart_text, reply_markup=inline_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query_handler(lambda query: query.data == "clear_cart")
async def process_clear_cart(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    cursor.execute("DELETE FROM orders WHERE user_id=?", (user_id,))
    conn.commit()

    await bot.delete_message(
        callback_query.from_user.id, callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id, "–ö–æ—Ä–∑–∏–Ω–∞ —á–∏—Å—Ç–æ!")


@dp.callback_query_handler(lambda query: query.data == "buy_cart")
async def process_buy_cart(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()

    cursor.execute(
        """
		SELECT products.name, products.price, orders.quantity, products.file
		FROM orders
		JOIN products ON orders.product_id = products.id
		WHERE orders.user_id=?
		""",
        (user_id,),
    )
    cart_items = cursor.fetchall()

    cart_total = sum(item[1] * item[2] for item in cart_items)

    if balance and cart_total and balance[0] >= cart_total:
        cursor.execute(
            "UPDATE users SET balance = balance - ? WHERE user_id=?",
            (cart_total, user_id),
        )
        conn.commit()

        cursor.execute("DELETE FROM orders WHERE user_id=?", (user_id,))
        conn.commit()

        await bot.delete_message(
            callback_query.from_user.id, callback_query.message.message_id
        )
        await bot.send_message(user_id, "–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω–æ! –ü–∞—Ä—Ç–∏—è –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π!")
        for item in cart_items:
            file_path = item[3]
            if file_path:
                with open(file_path, "rb") as file:
                    await bot.send_photo(user_id, file, caption=f"{item[0]} x{item[2]}")
        await bot.answer_callback_query(callback_query.id)
    else:
        await bot.send_message(
            user_id,
            "–ú–∞–ª–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑! –í—ã —Ä–∞–∑–æ—á–∞—Ä–æ–≤—ã–≤–∞—Ç—å –ø–∞—Ä—Ç–∏—é!",
        )
        await bot.answer_callback_query(callback_query.id)
    conn.commit()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
@dp.message_handler(commands=["balance"])
async def cmd_balance(message: types.Message):
    user_id = message.from_user.id

    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    balance = cursor.fetchone()

    if balance:
        await message.answer(f"–í–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–µ–Ω—å–≥–∞: {balance[0]}üí∑")
    else:
        await message.answer("–ù–µ—Ç—É –¥–µ–Ω—å–≥–∞. –í–≤–µ—Å—Ç–∏ /start")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler()
async def unknown(message: types.Message):
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
